---
swagger: "2.0"
info:
  description: "This is the API for PCBV. You can learn more on the GitHub page at\n\
    [https://github.com/LucasBaizer/pcbv](https://github.com/LucasBaizer/pcbv).\n"
  version: "1.0.0"
  title: "PCBV REST API"
  termsOfService: "http://swagger.io/terms"
  contact:
    email: "lucasallenbaizer@gmail.com"
  license:
    name: "MIT"
    url: "https://github.com/LucasBaizer/pcbv/tree/master/LICENSE.md"
basePath: "/api/v1"
tags:
- name: "circuit"
  description: "Work with circuits"
- name: "phrase"
schemes:
- "http"
- "https"
paths:
  /circuit:
    post:
      tags:
      - "circuit"
      summary: "Creates basic information and the image for a new circuit"
      operationId: "createCircuit"
      parameters:
      - in: "body"
        name: "body"
        description: "Data to create for the circuit"
        required: true
        schema:
          $ref: "#/definitions/Circuit"
      responses:
        200:
          description: "Circuit has been created"
          schema:
            $ref: "#/definitions/Circuit"
        400:
          description: "Invalid request data"
      x-swagger-router-controller: "Circuit"
  /circuit/{circuitId}:
    get:
      tags:
      - "circuit"
      summary: "Gets basic information and the image of a circuit"
      operationId: "getCircuit"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      responses:
        200:
          description: "Circuit is valid"
          schema:
            $ref: "#/definitions/Circuit"
        404:
          description: "Circuit does not exist"
      x-swagger-router-controller: "Circuit"
    delete:
      tags:
      - "circuit"
      summary: "Deletes a circuit"
      operationId: "deleteCircuit"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      responses:
        200:
          description: "Successfully deleted circuit"
        404:
          description: "Circuit does not exist"
      x-swagger-router-controller: "Circuit"
  /circuit/{circuitId}/subcircuit:
    get:
      tags:
      - "circuit"
      summary: "Gets basic information and the image of all subcircuits of a circuit"
      operationId: "getSubCircuits"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      responses:
        200:
          description: "Circuit is valid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/SubCircuit"
        404:
          description: "Circuit does not exist"
      x-swagger-router-controller: "Circuit"
    post:
      tags:
      - "circuit"
      summary: "Creates basic information and image of a particular subcircuit in\
        \ a circuit"
      operationId: "createSubCircuit"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to create for the subcircuit"
        required: true
        schema:
          $ref: "#/definitions/SubCircuit"
      responses:
        200:
          description: "Successfully ceated"
          schema:
            $ref: "#/definitions/SubCircuit"
        400:
          description: "Invalid request data"
        404:
          description: "Circuit does not exist"
      x-swagger-router-controller: "Circuit"
  /circuit/{circuitId}/subcircuit/{subCircuitId}:
    delete:
      tags:
      - "circuit"
      summary: "Deletes a particular subcircuit of a circuit"
      operationId: "deleteSubCircuit"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      - name: "subCircuitId"
        in: "path"
        description: "ID of the subcircuit"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successfully deleted subcircuit"
        404:
          description: "Either circuit or subcircuit does not exist"
      x-swagger-router-controller: "Circuit"
  /circuit/{circuitId}/component:
    get:
      tags:
      - "circuit"
      summary: "Gets root components of a circuit"
      operationId: "getCircuitComponents"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      responses:
        200:
          description: "Circuit is valid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Component"
        404:
          description: "Circuit does not exist"
      x-swagger-router-controller: "Circuit"
  /circuit/{circuitId}/component/{componentId}:
    delete:
      tags:
      - "circuit"
      summary: "Deletes a root component from the circuit"
      operationId: "deleteCircuitComponent"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      - name: "componentId"
        in: "path"
        description: "ID of the component"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successfully deleted component"
        404:
          description: "Either circuit or component does not exist"
      x-swagger-router-controller: "Circuit"
  /circuit/{circuitId}/subcircuit/{subCircuitId}/component:
    get:
      tags:
      - "circuit"
      summary: "Gets components of a particular subcircuit of a circuit"
      operationId: "getSubCircuitComponents"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      - name: "subCircuitId"
        in: "path"
        description: "ID of the subcircuit"
        required: true
        type: "integer"
      responses:
        200:
          description: "Circuit and subcircuit are valid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Component"
        404:
          description: "Either circuit or subcircuit do not exist"
      x-swagger-router-controller: "Circuit"
  /circuit/{circuitId}/subcircuit/{subCircuitId}/component/{componentId}:
    delete:
      tags:
      - "circuit"
      summary: "Deletes a component from a particular subcircuit of a circuit"
      operationId: "deleteSubCircuitComponent"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      - name: "subCircuitId"
        in: "path"
        description: "ID of the subcircuit"
        required: true
        type: "integer"
      - name: "componentId"
        in: "path"
        description: "ID of the component"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successfully deleted component"
        404:
          description: "Either circuit, subcircuit, or component does not exist"
      x-swagger-router-controller: "Circuit"
  /circuit/{circuitId}/category:
    get:
      tags:
      - "circuit"
      summary: "Gets categories of a circuit"
      operationId: "getCircuitCategories"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      responses:
        200:
          description: "Circuit is valid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Category"
        404:
          description: "Circuit does not exist"
      x-swagger-router-controller: "Circuit"
    post:
      tags:
      - "circuit"
      summary: "Creates a new circuit category"
      operationId: "createCircuitCategory"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Data to create for the category"
        required: false
        schema:
          $ref: "#/definitions/Category"
      responses:
        200:
          description: "Successfully created circuit"
          schema:
            $ref: "#/definitions/Category"
        400:
          description: "Invalid request data"
        404:
          description: "Circuit does not exist"
      x-swagger-router-controller: "Circuit"
  /circuit/{circuitId}/category/{categoryId}:
    delete:
      tags:
      - "circuit"
      summary: "Deletes a particular category of a circuit"
      operationId: "deleteCircuitCategory"
      parameters:
      - name: "circuitId"
        in: "path"
        description: "GUID of the circuit"
        required: true
        type: "string"
      - name: "categoryId"
        in: "path"
        description: "ID of the category"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successfully deleted category"
        404:
          description: "Either circuit or category does not exist"
      x-swagger-router-controller: "Circuit"
  /phrase:
    get:
      tags:
      - "phrase"
      summary: "Gets a PCBV random phrase"
      description: "Gets a random phrase, which has an acronym of P.C.B.V.\n"
      operationId: "getPcbvPhrase"
      parameters: []
      responses:
        200:
          description: "Successfully got the random phrase"
          schema:
            $ref: "#/definitions/PcbvPhrase"
      x-swagger-router-controller: "Phrase"
definitions:
  Circuit:
    type: "object"
    properties:
      circuitId:
        type: "string"
      name:
        type: "string"
      image:
        type: "string"
      imageType:
        type: "string"
    example:
      image: "image"
      imageType: "imageType"
      name: "name"
      circuitId: "circuitId"
  SubCircuit:
    type: "object"
    properties:
      subCircuitId:
        type: "integer"
        format: "int32"
      parentCircuitId:
        type: "string"
      image:
        type: "string"
      imageType:
        type: "string"
    example:
      image: "image"
      imageType: "imageType"
      parentCircuitId: "parentCircuitId"
      subCircuitId: 0
  Component:
    type: "object"
    properties:
      componentId:
        type: "integer"
        format: "int32"
      subCircuitId:
        type: "integer"
        format: "int32"
      bounds:
        $ref: "#/definitions/ComponentBounds"
      name:
        type: "string"
      description:
        type: "string"
      documentationUrl:
        type: "string"
      category:
        $ref: "#/definitions/Category"
    example:
      documentationUrl: "documentationUrl"
      componentId: 0
      bounds:
        x: 1
        width: 5
        y: 5
        height: 2
      name: "name"
      subCircuitId: 6
      description: "description"
      category:
        color: "color"
        name: "name"
        categoryId: 7
        circuitId: 9
        tags:
        - "tags"
        - "tags"
  ComponentBounds:
    type: "object"
    properties:
      x:
        type: "integer"
      y:
        type: "integer"
      width:
        type: "integer"
      height:
        type: "integer"
    example:
      x: 1
      width: 5
      y: 5
      height: 2
  Category:
    type: "object"
    properties:
      categoryId:
        type: "integer"
        format: "int32"
      circuitId:
        type: "integer"
        format: "int32"
      name:
        type: "string"
      color:
        type: "string"
      tags:
        type: "array"
        items:
          type: "string"
    example:
      color: "color"
      name: "name"
      categoryId: 7
      circuitId: 9
      tags:
      - "tags"
      - "tags"
  PcbvPhrase:
    type: "object"
    properties:
      phrase:
        type: "string"
    example:
      phrase: "phrase"
externalDocs:
  description: "Find out more about PCBV"
  url: "https://github.com/LucasBaizer/pcbv"
